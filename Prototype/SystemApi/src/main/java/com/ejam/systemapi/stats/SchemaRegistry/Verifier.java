/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ejam.systemapi.stats.SchemaRegistry;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Verifier extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4911333250677405193L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Verifier\",\"namespace\":\"com.ejam.systemapi.stats.SchemaRegistry\",\"fields\":[{\"name\":\"macAddress\",\"type\":{\"type\":\"string\",\"pattern\":\"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\"}},{\"name\":\"streamId\",\"type\":{\"type\":\"string\",\"pattern\":\"^\\\\w{3}$\"}},{\"name\":\"packetsCorrect\",\"type\":{\"type\":\"long\",\"logicalType\":\"unsigned\"}},{\"name\":\"packetsErrors\",\"type\":{\"type\":\"long\",\"logicalType\":\"unsigned\"}},{\"name\":\"packetsDropped\",\"type\":{\"type\":\"long\",\"logicalType\":\"unsigned\"}},{\"name\":\"packetsOutOfOrder\",\"type\":{\"type\":\"long\",\"logicalType\":\"unsigned\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Verifier> ENCODER =
            new BinaryMessageEncoder<Verifier>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Verifier> DECODER =
            new BinaryMessageDecoder<Verifier>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Verifier> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Verifier> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Verifier> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Verifier>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Verifier to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Verifier from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Verifier instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Verifier fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence macAddress;
    private java.lang.CharSequence streamId;
    private long packetsCorrect;
    private long packetsErrors;
    private long packetsDropped;
    private long packetsOutOfOrder;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Verifier() {}

    /**
     * All-args constructor.
     * @param macAddress The new value for macAddress
     * @param streamId The new value for streamId
     * @param packetsCorrect The new value for packetsCorrect
     * @param packetsErrors The new value for packetsErrors
     * @param packetsDropped The new value for packetsDropped
     * @param packetsOutOfOrder The new value for packetsOutOfOrder
     */
    public Verifier(java.lang.CharSequence macAddress, java.lang.CharSequence streamId, java.lang.Long packetsCorrect, java.lang.Long packetsErrors, java.lang.Long packetsDropped, java.lang.Long packetsOutOfOrder) {
        this.macAddress = macAddress;
        this.streamId = streamId;
        this.packetsCorrect = packetsCorrect;
        this.packetsErrors = packetsErrors;
        this.packetsDropped = packetsDropped;
        this.packetsOutOfOrder = packetsOutOfOrder;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return macAddress;
            case 1: return streamId;
            case 2: return packetsCorrect;
            case 3: return packetsErrors;
            case 4: return packetsDropped;
            case 5: return packetsOutOfOrder;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: macAddress = (java.lang.CharSequence)value$; break;
            case 1: streamId = (java.lang.CharSequence)value$; break;
            case 2: packetsCorrect = (java.lang.Long)value$; break;
            case 3: packetsErrors = (java.lang.Long)value$; break;
            case 4: packetsDropped = (java.lang.Long)value$; break;
            case 5: packetsOutOfOrder = (java.lang.Long)value$; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'macAddress' field.
     * @return The value of the 'macAddress' field.
     */
    public java.lang.CharSequence getMacAddress() {
        return macAddress;
    }


    /**
     * Sets the value of the 'macAddress' field.
     * @param value the value to set.
     */
    public void setMacAddress(java.lang.CharSequence value) {
        this.macAddress = value;
    }

    /**
     * Gets the value of the 'streamId' field.
     * @return The value of the 'streamId' field.
     */
    public java.lang.CharSequence getStreamId() {
        return streamId;
    }


    /**
     * Sets the value of the 'streamId' field.
     * @param value the value to set.
     */
    public void setStreamId(java.lang.CharSequence value) {
        this.streamId = value;
    }

    /**
     * Gets the value of the 'packetsCorrect' field.
     * @return The value of the 'packetsCorrect' field.
     */
    public long getPacketsCorrect() {
        return packetsCorrect;
    }


    /**
     * Sets the value of the 'packetsCorrect' field.
     * @param value the value to set.
     */
    public void setPacketsCorrect(long value) {
        this.packetsCorrect = value;
    }

    /**
     * Gets the value of the 'packetsErrors' field.
     * @return The value of the 'packetsErrors' field.
     */
    public long getPacketsErrors() {
        return packetsErrors;
    }


    /**
     * Sets the value of the 'packetsErrors' field.
     * @param value the value to set.
     */
    public void setPacketsErrors(long value) {
        this.packetsErrors = value;
    }

    /**
     * Gets the value of the 'packetsDropped' field.
     * @return The value of the 'packetsDropped' field.
     */
    public long getPacketsDropped() {
        return packetsDropped;
    }


    /**
     * Sets the value of the 'packetsDropped' field.
     * @param value the value to set.
     */
    public void setPacketsDropped(long value) {
        this.packetsDropped = value;
    }

    /**
     * Gets the value of the 'packetsOutOfOrder' field.
     * @return The value of the 'packetsOutOfOrder' field.
     */
    public long getPacketsOutOfOrder() {
        return packetsOutOfOrder;
    }


    /**
     * Sets the value of the 'packetsOutOfOrder' field.
     * @param value the value to set.
     */
    public void setPacketsOutOfOrder(long value) {
        this.packetsOutOfOrder = value;
    }

    /**
     * Creates a new Verifier RecordBuilder.
     * @return A new Verifier RecordBuilder
     */
    public static com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder newBuilder() {
        return new com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder();
    }

    /**
     * Creates a new Verifier RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Verifier RecordBuilder
     */
    public static com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder newBuilder(com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder other) {
        if (other == null) {
            return new com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder();
        } else {
            return new com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder(other);
        }
    }

    /**
     * Creates a new Verifier RecordBuilder by copying an existing Verifier instance.
     * @param other The existing instance to copy.
     * @return A new Verifier RecordBuilder
     */
    public static com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder newBuilder(com.ejam.systemapi.stats.SchemaRegistry.Verifier other) {
        if (other == null) {
            return new com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder();
        } else {
            return new com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder(other);
        }
    }

    /**
     * RecordBuilder for Verifier instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Verifier>
            implements org.apache.avro.data.RecordBuilder<Verifier> {

        private java.lang.CharSequence macAddress;
        private java.lang.CharSequence streamId;
        private long packetsCorrect;
        private long packetsErrors;
        private long packetsDropped;
        private long packetsOutOfOrder;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.macAddress)) {
                this.macAddress = data().deepCopy(fields()[0].schema(), other.macAddress);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.streamId)) {
                this.streamId = data().deepCopy(fields()[1].schema(), other.streamId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.packetsCorrect)) {
                this.packetsCorrect = data().deepCopy(fields()[2].schema(), other.packetsCorrect);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.packetsErrors)) {
                this.packetsErrors = data().deepCopy(fields()[3].schema(), other.packetsErrors);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.packetsDropped)) {
                this.packetsDropped = data().deepCopy(fields()[4].schema(), other.packetsDropped);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.packetsOutOfOrder)) {
                this.packetsOutOfOrder = data().deepCopy(fields()[5].schema(), other.packetsOutOfOrder);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing Verifier instance
         * @param other The existing instance to copy.
         */
        private Builder(com.ejam.systemapi.stats.SchemaRegistry.Verifier other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.macAddress)) {
                this.macAddress = data().deepCopy(fields()[0].schema(), other.macAddress);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.streamId)) {
                this.streamId = data().deepCopy(fields()[1].schema(), other.streamId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.packetsCorrect)) {
                this.packetsCorrect = data().deepCopy(fields()[2].schema(), other.packetsCorrect);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.packetsErrors)) {
                this.packetsErrors = data().deepCopy(fields()[3].schema(), other.packetsErrors);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.packetsDropped)) {
                this.packetsDropped = data().deepCopy(fields()[4].schema(), other.packetsDropped);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.packetsOutOfOrder)) {
                this.packetsOutOfOrder = data().deepCopy(fields()[5].schema(), other.packetsOutOfOrder);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'macAddress' field.
         * @return The value.
         */
        public java.lang.CharSequence getMacAddress() {
            return macAddress;
        }


        /**
         * Sets the value of the 'macAddress' field.
         * @param value The value of 'macAddress'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setMacAddress(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.macAddress = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'macAddress' field has been set.
         * @return True if the 'macAddress' field has been set, false otherwise.
         */
        public boolean hasMacAddress() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'macAddress' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearMacAddress() {
            macAddress = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'streamId' field.
         * @return The value.
         */
        public java.lang.CharSequence getStreamId() {
            return streamId;
        }


        /**
         * Sets the value of the 'streamId' field.
         * @param value The value of 'streamId'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setStreamId(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.streamId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'streamId' field has been set.
         * @return True if the 'streamId' field has been set, false otherwise.
         */
        public boolean hasStreamId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'streamId' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearStreamId() {
            streamId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'packetsCorrect' field.
         * @return The value.
         */
        public long getPacketsCorrect() {
            return packetsCorrect;
        }


        /**
         * Sets the value of the 'packetsCorrect' field.
         * @param value The value of 'packetsCorrect'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setPacketsCorrect(long value) {
            validate(fields()[2], value);
            this.packetsCorrect = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'packetsCorrect' field has been set.
         * @return True if the 'packetsCorrect' field has been set, false otherwise.
         */
        public boolean hasPacketsCorrect() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'packetsCorrect' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearPacketsCorrect() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'packetsErrors' field.
         * @return The value.
         */
        public long getPacketsErrors() {
            return packetsErrors;
        }


        /**
         * Sets the value of the 'packetsErrors' field.
         * @param value The value of 'packetsErrors'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setPacketsErrors(long value) {
            validate(fields()[3], value);
            this.packetsErrors = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'packetsErrors' field has been set.
         * @return True if the 'packetsErrors' field has been set, false otherwise.
         */
        public boolean hasPacketsErrors() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'packetsErrors' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearPacketsErrors() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'packetsDropped' field.
         * @return The value.
         */
        public long getPacketsDropped() {
            return packetsDropped;
        }


        /**
         * Sets the value of the 'packetsDropped' field.
         * @param value The value of 'packetsDropped'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setPacketsDropped(long value) {
            validate(fields()[4], value);
            this.packetsDropped = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'packetsDropped' field has been set.
         * @return True if the 'packetsDropped' field has been set, false otherwise.
         */
        public boolean hasPacketsDropped() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'packetsDropped' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearPacketsDropped() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'packetsOutOfOrder' field.
         * @return The value.
         */
        public long getPacketsOutOfOrder() {
            return packetsOutOfOrder;
        }


        /**
         * Sets the value of the 'packetsOutOfOrder' field.
         * @param value The value of 'packetsOutOfOrder'.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder setPacketsOutOfOrder(long value) {
            validate(fields()[5], value);
            this.packetsOutOfOrder = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'packetsOutOfOrder' field has been set.
         * @return True if the 'packetsOutOfOrder' field has been set, false otherwise.
         */
        public boolean hasPacketsOutOfOrder() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'packetsOutOfOrder' field.
         * @return This builder.
         */
        public com.ejam.systemapi.stats.SchemaRegistry.Verifier.Builder clearPacketsOutOfOrder() {
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Verifier build() {
            try {
                Verifier record = new Verifier();
                record.macAddress = fieldSetFlags()[0] ? this.macAddress : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.streamId = fieldSetFlags()[1] ? this.streamId : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.packetsCorrect = fieldSetFlags()[2] ? this.packetsCorrect : (java.lang.Long) defaultValue(fields()[2]);
                record.packetsErrors = fieldSetFlags()[3] ? this.packetsErrors : (java.lang.Long) defaultValue(fields()[3]);
                record.packetsDropped = fieldSetFlags()[4] ? this.packetsDropped : (java.lang.Long) defaultValue(fields()[4]);
                record.packetsOutOfOrder = fieldSetFlags()[5] ? this.packetsOutOfOrder : (java.lang.Long) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Verifier>
            WRITER$ = (org.apache.avro.io.DatumWriter<Verifier>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Verifier>
            READER$ = (org.apache.avro.io.DatumReader<Verifier>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException
    {
        out.writeString(this.macAddress);

        out.writeString(this.streamId);

        out.writeLong(this.packetsCorrect);

        out.writeLong(this.packetsErrors);

        out.writeLong(this.packetsDropped);

        out.writeLong(this.packetsOutOfOrder);

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException
    {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.macAddress = in.readString(this.macAddress instanceof Utf8 ? (Utf8)this.macAddress : null);

            this.streamId = in.readString(this.streamId instanceof Utf8 ? (Utf8)this.streamId : null);

            this.packetsCorrect = in.readLong();

            this.packetsErrors = in.readLong();

            this.packetsDropped = in.readLong();

            this.packetsOutOfOrder = in.readLong();

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.macAddress = in.readString(this.macAddress instanceof Utf8 ? (Utf8)this.macAddress : null);
                        break;

                    case 1:
                        this.streamId = in.readString(this.streamId instanceof Utf8 ? (Utf8)this.streamId : null);
                        break;

                    case 2:
                        this.packetsCorrect = in.readLong();
                        break;

                    case 3:
                        this.packetsErrors = in.readLong();
                        break;

                    case 4:
                        this.packetsDropped = in.readLong();
                        break;

                    case 5:
                        this.packetsOutOfOrder = in.readLong();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
