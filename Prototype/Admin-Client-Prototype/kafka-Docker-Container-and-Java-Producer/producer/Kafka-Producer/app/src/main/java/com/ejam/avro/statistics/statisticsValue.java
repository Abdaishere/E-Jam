/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ejam.avro.statistics;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class statisticsValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1886067394493256832L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"statisticsValue\",\"namespace\":\"com.ejam.avro.statistics\",\"fields\":[{\"name\":\"ErrorTotal\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"Rate\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"Total\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"Date\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"Verifier\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<statisticsValue> ENCODER =
          new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<statisticsValue> DECODER =
          new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<statisticsValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<statisticsValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<statisticsValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this statisticsValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a statisticsValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a statisticsValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static statisticsValue fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer ErrorTotal;
  private java.lang.Integer Rate;
  private java.lang.String id;
  private java.lang.String Source;
  private java.lang.Integer Total;
  private java.time.LocalDateTime Date;
  private boolean Verifier;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public statisticsValue() {}

  /**
   * All-args constructor.
   * @param ErrorTotal The new value for ErrorTotal
   * @param Rate The new value for Rate
   * @param id The new value for id
   * @param Source The new value for Source
   * @param Total The new value for Total
   * @param Date The new value for Date
   * @param Verifier The new value for Verifier
   */
  public statisticsValue(java.lang.Integer ErrorTotal, java.lang.Integer Rate, java.lang.String id, java.lang.String Source, java.lang.Integer Total, java.time.LocalDateTime Date, java.lang.Boolean Verifier) {
    this.ErrorTotal = ErrorTotal;
    this.Rate = Rate;
    this.id = id;
    this.Source = Source;
    this.Total = Total;
    this.Date = Date;
    this.Verifier = Verifier;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return ErrorTotal;
      case 1: return Rate;
      case 2: return id;
      case 3: return Source;
      case 4: return Total;
      case 5: return Date;
      case 6: return Verifier;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
          new org.apache.avro.Conversion<?>[] {
                  null,
                  null,
                  null,
                  null,
                  null,
                  new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
                  null,
                  null
          };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: ErrorTotal = (java.lang.Integer)value$; break;
      case 1: Rate = (java.lang.Integer)value$; break;
      case 2: id = value$ != null ? value$.toString() : null; break;
      case 3: Source = value$ != null ? value$.toString() : null; break;
      case 4: Total = (java.lang.Integer)value$; break;
      case 5: Date = (java.time.LocalDateTime)value$; break;
      case 6: Verifier = (java.lang.Boolean)value$; break;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ErrorTotal' field.
   * @return The value of the 'ErrorTotal' field.
   */
  public java.lang.Integer getErrorTotal() {
    return ErrorTotal;
  }


  /**
   * Sets the value of the 'ErrorTotal' field.
   * @param value the value to set.
   */
  public void setErrorTotal(java.lang.Integer value) {
    this.ErrorTotal = value;
  }

  /**
   * Gets the value of the 'Rate' field.
   * @return The value of the 'Rate' field.
   */
  public java.lang.Integer getRate() {
    return Rate;
  }


  /**
   * Sets the value of the 'Rate' field.
   * @param value the value to set.
   */
  public void setRate(java.lang.Integer value) {
    this.Rate = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'Source' field.
   * @return The value of the 'Source' field.
   */
  public java.lang.String getSource() {
    return Source;
  }


  /**
   * Sets the value of the 'Source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.Source = value;
  }

  /**
   * Gets the value of the 'Total' field.
   * @return The value of the 'Total' field.
   */
  public java.lang.Integer getTotal() {
    return Total;
  }


  /**
   * Sets the value of the 'Total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Integer value) {
    this.Total = value;
  }

  /**
   * Gets the value of the 'Date' field.
   * @return The value of the 'Date' field.
   */
  public java.time.LocalDateTime getDate() {
    return Date;
  }


  /**
   * Sets the value of the 'Date' field.
   * @param value the value to set.
   */
  public void setDate(java.time.LocalDateTime value) {
    this.Date = value;
  }

  /**
   * Gets the value of the 'Verifier' field.
   * @return The value of the 'Verifier' field.
   */
  public boolean getVerifier() {
    return Verifier;
  }


  /**
   * Sets the value of the 'Verifier' field.
   * @param value the value to set.
   */
  public void setVerifier(boolean value) {
    this.Verifier = value;
  }

  /**
   * Creates a new statisticsValue RecordBuilder.
   * @return A new statisticsValue RecordBuilder
   */
  public static com.ejam.avro.statistics.statisticsValue.Builder newBuilder() {
    return new com.ejam.avro.statistics.statisticsValue.Builder();
  }

  /**
   * Creates a new statisticsValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new statisticsValue RecordBuilder
   */
  public static com.ejam.avro.statistics.statisticsValue.Builder newBuilder(com.ejam.avro.statistics.statisticsValue.Builder other) {
    if (other == null) {
      return new com.ejam.avro.statistics.statisticsValue.Builder();
    } else {
      return new com.ejam.avro.statistics.statisticsValue.Builder(other);
    }
  }

  /**
   * Creates a new statisticsValue RecordBuilder by copying an existing statisticsValue instance.
   * @param other The existing instance to copy.
   * @return A new statisticsValue RecordBuilder
   */
  public static com.ejam.avro.statistics.statisticsValue.Builder newBuilder(com.ejam.avro.statistics.statisticsValue other) {
    if (other == null) {
      return new com.ejam.avro.statistics.statisticsValue.Builder();
    } else {
      return new com.ejam.avro.statistics.statisticsValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for statisticsValue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<statisticsValue>
          implements org.apache.avro.data.RecordBuilder<statisticsValue> {

    private java.lang.Integer ErrorTotal;
    private java.lang.Integer Rate;
    private java.lang.String id;
    private java.lang.String Source;
    private java.lang.Integer Total;
    private java.time.LocalDateTime Date;
    private boolean Verifier;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ejam.avro.statistics.statisticsValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ErrorTotal)) {
        this.ErrorTotal = data().deepCopy(fields()[0].schema(), other.ErrorTotal);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Rate)) {
        this.Rate = data().deepCopy(fields()[1].schema(), other.Rate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Source)) {
        this.Source = data().deepCopy(fields()[3].schema(), other.Source);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Total)) {
        this.Total = data().deepCopy(fields()[4].schema(), other.Total);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Date)) {
        this.Date = data().deepCopy(fields()[5].schema(), other.Date);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.Verifier)) {
        this.Verifier = data().deepCopy(fields()[6].schema(), other.Verifier);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing statisticsValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ejam.avro.statistics.statisticsValue other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ErrorTotal)) {
        this.ErrorTotal = data().deepCopy(fields()[0].schema(), other.ErrorTotal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Rate)) {
        this.Rate = data().deepCopy(fields()[1].schema(), other.Rate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Source)) {
        this.Source = data().deepCopy(fields()[3].schema(), other.Source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Total)) {
        this.Total = data().deepCopy(fields()[4].schema(), other.Total);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Date)) {
        this.Date = data().deepCopy(fields()[5].schema(), other.Date);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Verifier)) {
        this.Verifier = data().deepCopy(fields()[6].schema(), other.Verifier);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Gets the value of the 'ErrorTotal' field.
     * @return The value.
     */
    public java.lang.Integer getErrorTotal() {
      return ErrorTotal;
    }


    /**
     * Sets the value of the 'ErrorTotal' field.
     * @param value The value of 'ErrorTotal'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setErrorTotal(java.lang.Integer value) {
      validate(fields()[0], value);
      this.ErrorTotal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'ErrorTotal' field has been set.
     * @return True if the 'ErrorTotal' field has been set, false otherwise.
     */
    public boolean hasErrorTotal() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'ErrorTotal' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearErrorTotal() {
      ErrorTotal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'Rate' field.
     * @return The value.
     */
    public java.lang.Integer getRate() {
      return Rate;
    }


    /**
     * Sets the value of the 'Rate' field.
     * @param value The value of 'Rate'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setRate(java.lang.Integer value) {
      validate(fields()[1], value);
      this.Rate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'Rate' field has been set.
     * @return True if the 'Rate' field has been set, false otherwise.
     */
    public boolean hasRate() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'Rate' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearRate() {
      Rate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value.
     */
    public java.lang.String getId() {
      return id;
    }


    /**
     * Sets the value of the 'id' field.
     * @param value The value of 'id'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setId(java.lang.String value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set.
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'id' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'Source' field.
     * @return The value.
     */
    public java.lang.String getSource() {
      return Source;
    }


    /**
     * Sets the value of the 'Source' field.
     * @param value The value of 'Source'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setSource(java.lang.String value) {
      validate(fields()[3], value);
      this.Source = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'Source' field has been set.
     * @return True if the 'Source' field has been set, false otherwise.
     */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'Source' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearSource() {
      Source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'Total' field.
     * @return The value.
     */
    public java.lang.Integer getTotal() {
      return Total;
    }


    /**
     * Sets the value of the 'Total' field.
     * @param value The value of 'Total'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setTotal(java.lang.Integer value) {
      validate(fields()[4], value);
      this.Total = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'Total' field has been set.
     * @return True if the 'Total' field has been set, false otherwise.
     */
    public boolean hasTotal() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'Total' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearTotal() {
      Total = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'Date' field.
     * @return The value.
     */
    public java.time.LocalDateTime getDate() {
      return Date;
    }


    /**
     * Sets the value of the 'Date' field.
     * @param value The value of 'Date'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setDate(java.time.LocalDateTime value) {
      validate(fields()[5], value);
      this.Date = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'Date' field has been set.
     * @return True if the 'Date' field has been set, false otherwise.
     */
    public boolean hasDate() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'Date' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'Verifier' field.
     * @return The value.
     */
    public boolean getVerifier() {
      return Verifier;
    }


    /**
     * Sets the value of the 'Verifier' field.
     * @param value The value of 'Verifier'.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder setVerifier(boolean value) {
      validate(fields()[6], value);
      this.Verifier = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'Verifier' field has been set.
     * @return True if the 'Verifier' field has been set, false otherwise.
     */
    public boolean hasVerifier() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'Verifier' field.
     * @return This builder.
     */
    public com.ejam.avro.statistics.statisticsValue.Builder clearVerifier() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public statisticsValue build() {
      try {
        statisticsValue record = new statisticsValue();
        record.ErrorTotal = fieldSetFlags()[0] ? this.ErrorTotal : (java.lang.Integer) defaultValue(fields()[0]);
        record.Rate = fieldSetFlags()[1] ? this.Rate : (java.lang.Integer) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.String) defaultValue(fields()[2]);
        record.Source = fieldSetFlags()[3] ? this.Source : (java.lang.String) defaultValue(fields()[3]);
        record.Total = fieldSetFlags()[4] ? this.Total : (java.lang.Integer) defaultValue(fields()[4]);
        record.Date = fieldSetFlags()[5] ? this.Date : (java.time.LocalDateTime) defaultValue(fields()[5]);
        record.Verifier = fieldSetFlags()[6] ? this.Verifier : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<statisticsValue>
          WRITER$ = (org.apache.avro.io.DatumWriter<statisticsValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<statisticsValue>
          READER$ = (org.apache.avro.io.DatumReader<statisticsValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










